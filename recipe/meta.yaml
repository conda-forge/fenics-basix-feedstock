{% set name = "fenics-basix" %}
# TODO: bump nanobind in conda_build_config for 0.9
{% set version = "0.8.0" %}
{% set abi_version = "0.{}.{}".format(nanobind, cxx_compiler_version) %}

package:
  name: {{ name|lower }}-meta
  version: {{ version }}

source:
  url: https://github.com/fenics/basix/archive/refs/tags/v{{ version }}.tar.gz
  sha256: b299af82daf8fa3e4845e17f202491fe71b313bf6ab64c767a5287190b3dd7fe

build:
  skip: true  # [win or python_impl == 'pypy' or py<39]
  number: 4
  force_use_keys:
    # separate builds for each Python
    # this duplicates libbasix outputs, but results in faster builds
    - python

outputs:
  - name: fenics-libbasix
    script: build-libbasix.sh
    build:
      run_exports:
        - {{ pin_subpackage("fenics-libbasix", max_pin="x.x.x") }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ stdlib("c") }}
        - cmake
        - make
        - pkg-config
      host:
        - libblas
        - libcblas  # not linked, but needed for FindLAPACK during build
        - liblapack
    test:
      commands:
        - test -f $PREFIX/lib/libbasix${SHLIB_EXT}

  - name: fenics-basix
    script: build-basix-py.sh
    build:
      run_exports:
        - fenics-basix-nanobind-abi =={{ abi_version }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ stdlib("c") }}
        - cmake
        - make
        - pkg-config
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - nanobind  # [build_platform != target_platform]
      host:
        - scikit-build-core
        - python
        - pip
        - nanobind
        # - nanobind-abi
        - {{ pin_subpackage('fenics-libbasix', exact=True) }}
      run:
        - python
        - {{ pin_subpackage('fenics-libbasix', exact=True) }}
        - numpy
      run_constrained:
        # TODO: remove these in 0.9
        # redundant with abi package below
        # here to avoid breaking existing downstream builds
        # built before abi package was restored
        - {{ pin_compatible("nanobind", max_pin="x.x") }}
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
    test:
      requires:
        - pytest
        - pytest-xdist
      source_files:
        - test
      imports:
        - basix
      commands:
        - pytest -v test/test_create.py

  - name: fenics-basix-nanobind-abi
    version: "{{ abi_version }}"
    build:
      force_use_keys:
        - python
      run_exports:
        - fenics-basix-nanobind-abi =={{ abi_version }}

    requirements:
      run:
        - {{ pin_subpackage('fenics-basix', exact=True) }}
      run_constrained:
        # nanobind doesn't yet have an abi metapacakage,
        # but hope it doesn't get bumped in patch releases
        - nanobind {{ nanobind }}.*
        # we shouldn't need to restrict compiler version,
        # but nanobind includes compiler version in the ABI
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}

    test:
      commands:
        - echo 'ok'
about:
  home: https://fenicsproject.org
  summary: Basix is a finite element definition and tabulation runtime library
  license: MIT
  license_family: MIT
  license_file: LICENSE
  doc_url: https://docs.fenicsproject.org/basix/main/
  dev_url: https://github.com/fenics/basix

extra:
  feedstock-name: fenics-basix
  recipe-maintainers:
    - minrk
